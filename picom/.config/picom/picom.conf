shadow = true;

shadow-radius = 16;
shadow-opacity = .5;

shadow-exclude = [
  "name = 'Notification'",
  "class_g = 'Conky'",
  "class_g ?= 'Notify-osd'",
  "class_g = 'Cairo-clock'",
  "_GTK_FRAME_EXTENTS@:c"
];

shadow-ignore-shaped = false;

fading = false
fade-in-step = 0.05;

fade-out-step = 0.05;

inactive-opacity = 1;
frame-opacity = 1;

inactive-opacity-override = false;

active-opacity = 1;

inactive-dim = 0.3;

focus-exclude = [ "class_g = 'Cairo-clock'" ];
blur-kern = "3x3box";


blur-background-exclude = [
  "window_type = 'dock'",
  "window_type = 'desktop'",
  "_GTK_FRAME_EXTENTS@:c"
];

# backend = "glx";
backend = "xrender";

dithered-present = false;

vsync = true;

dbe = false;

unredir-if-possible = false;

mark-wmwin-focused = true;
mark-ovredir-focused = true;
detect-rounded-corners = true;
#
detect-client-opacity = true;

use-ewmh-active-win = true;
detect-transient = true;

detect-client-leader = true;
use-damage = true;

xrender-sync-fence = true;

log-level = "warn";

wintypes:
{
    tooltip =
    {
        # fade: Fade the particular type of windows.
        fade = true;
        # shadow: Give those windows shadow
        shadow = false;
        # opacity: Default opacity for the type of windows.
        opacity = 0.85;
        # focus: Whether to always consider windows of this type focused.
        focus = true;
    };
    dropdown_menu = { shadow = false; };
    popup_menu    = { shadow = false; };
    utility       = { shadow = false; };
};

# wintypes:
# {
#     tooltip =
#     {
#         # fade: Fade the particular type of windows.
#         fade = false;
#         # shadow: Give those windows shadow
#         shadow = false;
#         # opacity: Default opacity for the type of windows.
#         opacity = 1;
#         # focus: Whether to always consider windows of this type focused.
#         focus = true;
#     };
# };

# wintypes:
# {
#   tooltip = { fade = true; shadow = true; opacity = 0.75; focus = true; full-shadow = false; };
#   dock = { shadow = false; clip-shadow-above = true; }
#   dnd = { shadow = false; }
#   popup_menu = { opacity = 0.8; }
#   dropdown_menu = { opacity = 0.8; }
# };

# wintypes:
# {
#   tooltip = { fade = true; shadow = true; opacity = 0.75; focus = true; full-shadow = false; };
#   dock = { shadow = false; clip-shadow-above = true; }
#   dnd = { shadow = false; }
#   popup_menu = { opacity = 0.9; }
#   dropdown_menu = { opacity = 0.9; }
# };


#################################
#
# GLX backend
#
#################################

# GLX backend: Avoid using stencil buffer, useful if you don't have a stencil buffer.
# Might cause incorrect opacity when rendering transparent content (but never
# practically happened) and may not work with blur-background.
# My tests show a 15% performance boost. Recommended.
#
# glx-no-stencil = false
glx-no-stencil = true;

# GLX backend: Copy unmodified regions from front buffer instead of redrawing them all.
# My tests with nvidia-drivers show a 10% decrease in performance when the whole screen is modified,
# but a 20% increase when only 1/4 is.
# My tests on nouveau show terrible slowdown.
glx-copy-from-front = false;

# GLX backend: Use MESA_copy_sub_buffer to do partial screen update.
# My tests on nouveau shows a 200% performance boost when only 1/4 of the screen is updated.
# May break VSync and is not available on some drivers.
# Overrides --glx-copy-from-front.
# glx-use-
# copysubbuffermesa = true;

# GLX backend: Avoid rebinding pixmap on window damage.
# Probably could improve performance on rapid window content changes, but is known to break things on some drivers (LLVMpipe).
# Recommended if it works.
# glx-no-rebind-pixmap = true;

# GLX backend: GLX buffer swap method we assume.
# Could be undefined (0), copy (1), exchange (2), 3-6, or buffer-age (-1).
# undefined is the slowest and the safest, and the default value.
# copy is fastest, but may fail on some drivers,
# 2-6 are gradually slower but safer (6 is still faster than 0).
# Usually, double buffer means 2, triple buffer means 3.
# buffer-age means auto-detect using GLX_EXT_buffer_age, supported by some drivers.
# Useless with --glx-use-copysubbuffermesa.
# Partially breaks --resize-damage.
# Defaults to undefined.
#
# GLX backend: GLX buffer swap method we assume.
# Could be undefined (0), copy (1), exchange (2), 3-6, or buffer-age (-1).
# undefined is the slowest and the safest, and the default value.
# copy is fastest, but may fail on some drivers,
# 2-6 are gradually slower but safer (6 is still faster than 0).
# Usually, double buffer means 2, triple buffer means 3.
# buffer-age means auto-detect using GLX_EXT_buffer_age, supported by some drivers.
# Useless with --glx-use-copysubbuffermesa.
# Partially breaks --resize-damage.
# Defaults to undefined.
# glx-swap-method = "undefined";

# GLX backend: Avoid rebinding pixmap on window damage.
# Probably could improve performance on rapid window content changes,
# but is known to break things on some drivers (LLVMpipe, xf86-video-intel, etc.).
# Recommended if it works.
#
# glx-no-rebind-pixmap = false


#################################
#
# OTHER
#
#################################
no-dock-shadow = true;


#################################
#
# Blur
#
#################################
# experimental-backends = true;

# blur: {
#   method = "dual_kawase";
#   strength = 10;
#   background = false;
#   background-frame = false;
#   background-fixed = false;
# }

# Blur background of transparent windows. Bad performance with X Render backend. GLX backend is preferred.
# blur-background = false;
# Blur background of opaque windows with transparent frames as well.
# blur-background-frame = true;
# Do not let blur radius adjust based on window opacity.

#blur-kern = "3x3box"
#blur-kern = "7x7gaussian"
#blur-kern = "7x7gaussian";
# blur-background-fixed = false;

# blur-background-exclude = [
#     "window_type = 'dock'",
#     "window_type = 'desktop'"
# ];
